USE STUDY

/*
	TRUNCATE TABLE BINANCE_DATASET_KLINE
*/

DECLARE @SYMBOL_ID AS int = 2                            -- LTC/BTC
DECLARE @DATASET_INTERVAL AS bigint = 1000 * 60 * 60 * 2 -- 2 horas
DECLARE @FIRST_OPEN_TIMESTAMP AS bigint = 1577836800000  -- 01/01/2020 00:00:00.000
DECLARE @LAST_CLOSE_TIMESTAMP AS bigint = 1580515199999  -- 31/01/2020 23:59:59.999

INSERT INTO BINANCE_DATASET_KLINE (
	DATASET_NUMBER,
	DATASET_ROW,
	TRADE_COUNT,
	OPEN_VALUE,
	HIGH_VALUE,
	LOW_VALUE,
	CLOSE_VALUE,
	BASE_ASSET_VOLUME,
	BASE_ASSET_TAKER_BUY_VOLUME,
	QUOTE_ASSET_VOLUME,
	QUOTE_ASSET_TAKER_BUY_VOLUME,
	OPEN_TIMESTAMP,
	CLOSE_TIMESTAMP
)
SELECT
	[CURRENT].OPEN_TIMESTAMP AS DATASET_NUMBER,
	ROW_NUMBER() OVER (PARTITION BY [CURRENT].OPEN_TIMESTAMP ORDER BY HISTORIC.OPEN_TIMESTAMP DESC) AS DATASET_ROW,
	HISTORIC.TRADE_COUNT,
	HISTORIC.OPEN_VALUE,
	HISTORIC.HIGH_VALUE,
	HISTORIC.LOW_VALUE,
	HISTORIC.CLOSE_VALUE,
	HISTORIC.BASE_ASSET_VOLUME,
	HISTORIC.BASE_ASSET_TAKER_BUY_VOLUME,
	HISTORIC.QUOTE_ASSET_VOLUME,
	HISTORIC.QUOTE_ASSET_TAKER_BUY_VOLUME,
	HISTORIC.OPEN_TIMESTAMP,
	HISTORIC.CLOSE_TIMESTAMP
FROM BINANCE_SYMBOL_KLINE AS [CURRENT]
INNER JOIN BINANCE_SYMBOL_KLINE AS HISTORIC
	ON
		[CURRENT].SYMBOL_ID = HISTORIC.SYMBOL_ID
		AND HISTORIC.OPEN_TIMESTAMP BETWEEN [CURRENT].CLOSE_TIMESTAMP - @DATASET_INTERVAL AND [CURRENT].CLOSE_TIMESTAMP
WHERE
	[CURRENT].SYMBOL_ID = @SYMBOL_ID
	AND HISTORIC.OPEN_TIMESTAMP >= @FIRST_OPEN_TIMESTAMP
	AND [CURRENT].CLOSE_TIMESTAMP <= @LAST_CLOSE_TIMESTAMP
ORDER BY
	DATASET_NUMBER,
	DATASET_ROW
