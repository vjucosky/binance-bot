USE STUDY

/*
	TRUNCATE TABLE BINANCE_DATASET_KLINE
*/

EXECUTE BINANCE_DATASET_KLINE_LOAD

/*
	Métricas para validação inicial dos datasets gerados.
*/

SELECT
	COUNT(*) AS ROW_COUNT,
	MAX(DATASET_NUMBER) AS DATASET_COUNT,
	MAX(DATASET_ROW) AS LARGEST_DATASET_ROW_COUNT,
	MIN(OPEN_TIMESTAMP) AS FIRST_OPEN_TIMESTAMP,
	MAX(CLOSE_TIMESTAMP) AS LAST_CLOSE_TIMESTAMP,
	dbo.FROM_UNIX_TIMESTAMP(MIN(OPEN_TIMESTAMP)) AS FIRST_OPENED_AT,
	dbo.FROM_UNIX_TIMESTAMP(MAX(CLOSE_TIMESTAMP)) AS LAST_CLOSED_AT
FROM BINANCE_DATASET_KLINE

/*
	A query seguinte calcula o valor de venda desejado e adiciona uma flag caso a operação tenha condições para ser bem sucedida.

	Note que o objetivo da query é ser o mais performática possível, pois ela será utilizada para carga no PyTorch por número do
	dataset (coluna DATASET_NUMBER).
*/

DECLARE @PROFIT_MARGIN AS decimal(18, 8) = 1.03 -- 3% de margem de lucro
DECLARE @CURRENT_TICK AS int = 31;              -- A 31ª linha de cada dataset é considerada como o momento atual; as linhas 1-30 são consideradas como futuro

SELECT
	BDK.ID,
	BDK.DATASET_NUMBER,
	BDK.DATASET_ROW,
	BDK.TRADE_COUNT,
	BDK.OPEN_VALUE,
	BDK.HIGH_VALUE,
	BDK.LOW_VALUE,
	BDK.CLOSE_VALUE,
	BDK.BASE_ASSET_VOLUME,
	BDK.BASE_ASSET_TAKER_BUY_VOLUME,
	BDK.QUOTE_ASSET_VOLUME,
	BDK.QUOTE_ASSET_TAKER_BUY_VOLUME,
	BDK.OPEN_TIMESTAMP,
	BDK.CLOSE_TIMESTAMP,
	[TARGET].TARGET_SELL_VALUE,
	[TARGET].IS_PROFITABLE
FROM BINANCE_DATASET_KLINE AS BDK
INNER JOIN (
	SELECT
		[SOURCE].DATASET_NUMBER,
		MAX(IIF([SOURCE].DATASET_ROW = @CURRENT_TICK, [TARGET].CLOSE_VALUE * @PROFIT_MARGIN, NULL)) AS TARGET_SELL_VALUE,
		MAX(CASE
			WHEN [SOURCE].DATASET_ROW < @CURRENT_TICK AND (
				[SOURCE].OPEN_VALUE >= [TARGET].CLOSE_VALUE * @PROFIT_MARGIN
				OR [SOURCE].HIGH_VALUE >= [TARGET].CLOSE_VALUE * @PROFIT_MARGIN
				OR [SOURCE].LOW_VALUE >= [TARGET].CLOSE_VALUE * @PROFIT_MARGIN
				OR [SOURCE].CLOSE_VALUE >= [TARGET].CLOSE_VALUE * @PROFIT_MARGIN
			) THEN 1
			WHEN [SOURCE].DATASET_ROW < @CURRENT_TICK THEN 0
		END) AS IS_PROFITABLE
	FROM BINANCE_DATASET_KLINE AS [SOURCE]
	INNER JOIN BINANCE_DATASET_KLINE AS [TARGET]
		ON
			[SOURCE].DATASET_NUMBER = [TARGET].DATASET_NUMBER
			AND [TARGET].DATASET_ROW = @CURRENT_TICK
	GROUP BY [SOURCE].DATASET_NUMBER
) AS [TARGET]
	ON BDK.DATASET_NUMBER = [TARGET].DATASET_NUMBER
WHERE BDK.DATASET_ROW >= @CURRENT_TICK
ORDER BY
	BDK.DATASET_NUMBER,
	BDK.DATASET_ROW
