USE STUDY

/*
	DROP PROCEDURE IF EXISTS BINANCE_DATASET_LOAD
*/

CREATE PROCEDURE BINANCE_DATASET_LOAD (@NAME AS varchar(100), @SYMBOL_ID AS bigint, @INTERVAL AS integer, @START_TIMESTAMP AS bigint, @END_TIMESTAMP AS bigint)
AS
BEGIN
	SET NOCOUNT ON

	INSERT INTO BINANCE_DATASET (
		[NAME],
		NUMBER,
		START_TIMESTAMP,
		END_TIMESTAMP
	)
	SELECT
		@NAME AS [NAME],
		ROW_NUMBER() OVER (ORDER BY [CURRENT].OPEN_TIMESTAMP) AS NUMBER,
		MIN(HISTORIC.OPEN_TIMESTAMP) AS START_TIMESTAMP,
		MAX(HISTORIC.CLOSE_TIMESTAMP) AS END_TIMESTAMP
	FROM BINANCE_SYMBOL_KLINE AS [CURRENT]
	INNER JOIN BINANCE_SYMBOL_KLINE AS HISTORIC
		ON
			[CURRENT].SYMBOL_ID = HISTORIC.SYMBOL_ID
			AND HISTORIC.OPEN_TIMESTAMP BETWEEN [CURRENT].CLOSE_TIMESTAMP - @INTERVAL * 60 * 1000 AND [CURRENT].CLOSE_TIMESTAMP
	WHERE
		[CURRENT].SYMBOL_ID = @SYMBOL_ID
		AND HISTORIC.OPEN_TIMESTAMP >= @START_TIMESTAMP
		AND [CURRENT].CLOSE_TIMESTAMP <= @END_TIMESTAMP
	GROUP BY [CURRENT].OPEN_TIMESTAMP
	HAVING COUNT(*) = @INTERVAL

	INSERT INTO BINANCE_DATASET_KLINE (
		DATASET_ID,
		[ROW],
		TRADE_COUNT,
		OPEN_VALUE,
		HIGH_VALUE,
		LOW_VALUE,
		CLOSE_VALUE,
		BASE_ASSET_VOLUME,
		BASE_ASSET_TAKER_BUY_VOLUME,
		QUOTE_ASSET_VOLUME,
		QUOTE_ASSET_TAKER_BUY_VOLUME,
		OPEN_TIMESTAMP,
		CLOSE_TIMESTAMP
	)
	SELECT
		BD.ID,
		ROW_NUMBER() OVER (PARTITION BY BD.ID ORDER BY BSK.OPEN_TIMESTAMP DESC) AS [ROW],
		BSK.TRADE_COUNT,
		BSK.OPEN_VALUE,
		BSK.HIGH_VALUE,
		BSK.LOW_VALUE,
		BSK.CLOSE_VALUE,
		BSK.BASE_ASSET_VOLUME,
		BSK.BASE_ASSET_TAKER_BUY_VOLUME,
		BSK.QUOTE_ASSET_VOLUME,
		BSK.QUOTE_ASSET_TAKER_BUY_VOLUME,
		BSK.OPEN_TIMESTAMP,
		BSK.CLOSE_TIMESTAMP
	FROM BINANCE_DATASET AS BD
	INNER JOIN BINANCE_SYMBOL_KLINE AS BSK
		ON BSK.OPEN_TIMESTAMP BETWEEN BD.START_TIMESTAMP AND BD.END_TIMESTAMP
	WHERE
		BD.[NAME] = @NAME
		AND BSK.SYMBOL_ID = @SYMBOL_ID

	INSERT INTO BINANCE_DATASET_TRADE (
		DATASET_ID,
		[ROW],
		NUMBER,
		[VALUE],
		ASSET_QUANTITY,
		ASSET_PRICE,
		IS_BUYER_MAKER,
		IS_BEST_MATCH,
		EXECUTION_TIMESTAMP
	)
	SELECT
		BD.ID,
		ROW_NUMBER() OVER (PARTITION BY BD.ID ORDER BY BST.EXECUTION_TIMESTAMP DESC) AS [ROW],
		BST.NUMBER,
		BST.[VALUE],
		BST.ASSET_QUANTITY,
		BST.ASSET_PRICE,
		BST.IS_BUYER_MAKER,
		BST.IS_BEST_MATCH,
		BST.EXECUTION_TIMESTAMP
	FROM BINANCE_DATASET AS BD
	INNER JOIN BINANCE_SYMBOL_TRADE AS BST
		ON BST.EXECUTION_TIMESTAMP BETWEEN BD.START_TIMESTAMP AND BD.END_TIMESTAMP
	WHERE
		BD.[NAME] = @NAME
		AND BST.SYMBOL_ID = @SYMBOL_ID

	INSERT INTO BINANCE_DATASET_AGGTRADE (
		DATASET_ID,
		[ROW],
		NUMBER,
		FIRST_TRADE_NUMBER,
		LAST_TRADE_NUMBER,
		ASSET_QUANTITY,
		ASSET_PRICE,
		IS_BUYER_MAKER,
		IS_BEST_MATCH,
		EXECUTION_TIMESTAMP
	)
	SELECT
		BD.ID,
		ROW_NUMBER() OVER (PARTITION BY BD.ID ORDER BY BSA.EXECUTION_TIMESTAMP DESC) AS [ROW],
		BSA.NUMBER,
		BSA.FIRST_TRADE_NUMBER,
		BSA.LAST_TRADE_NUMBER,
		BSA.ASSET_QUANTITY,
		BSA.ASSET_PRICE,
		BSA.IS_BUYER_MAKER,
		BSA.IS_BEST_MATCH,
		BSA.EXECUTION_TIMESTAMP
	FROM BINANCE_DATASET AS BD
	INNER JOIN BINANCE_SYMBOL_AGGTRADE AS BSA
		ON BSA.EXECUTION_TIMESTAMP BETWEEN BD.START_TIMESTAMP AND BD.END_TIMESTAMP
	WHERE
		BD.[NAME] = @NAME
		AND BSA.SYMBOL_ID = @SYMBOL_ID
END
