USE STUDY

/*
	DROP TABLE IF EXISTS BINANCE_SYMBOL_AGGTRADE
	DROP TABLE IF EXISTS BINANCE_SYMBOL_TRADE
	DROP TABLE IF EXISTS BINANCE_SYMBOL_KLINE
	DROP TABLE IF EXISTS BINANCE_SYMBOL

	DROP FUNCTION IF EXISTS dbo.FROM_UNIX_TIMESTAMP

	DROP TABLE IF EXISTS BINANCE_DATASET_KLINE

	DROP PROCEDURE IF EXISTS BINANCE_DATASET_KLINE_LOAD

	DROP TABLE IF EXISTS BINANCE_BOT_EVENT
	DROP TABLE IF EXISTS BINANCE_BOT_RESPONSE
*/

CREATE TABLE BINANCE_SYMBOL (
	ID bigint IDENTITY(1, 1) NOT NULL,

	[NAME] varchar(40) NOT NULL,
	BASE_ASSET_NAME varchar(20) NOT NULL,
	BASE_ASSET_PRECISION integer NOT NULL,
	QUOTE_ASSET_NAME varchar(20) NOT NULL,
	QUOTE_ASSET_PRECISION integer NOT NULL,
	IS_ICEBERG_ALLOWED bit NOT NULL,
	IS_OCO_ALLOWED bit NOT NULL,
	IS_SPOT_TRADING_ALLOWED bit NOT NULL,
	IS_MARGIN_TRADING_ALLOWED bit NOT NULL,
	CREATED_AT datetime NOT NULL CONSTRAINT DF__BINANCE_SYMBOL__CREATED_AT DEFAULT GETDATE(),
	UPDATED_AT datetime,

	CONSTRAINT PK__BINANCE_SYMBOL__ID PRIMARY KEY (ID),
	CONSTRAINT UQ__BINANCE_SYMBOL__NAME UNIQUE ([NAME]),
	CONSTRAINT UQ__BINANCE_SYMBOL__BASE_ASSET_NAME__QUOTE_ASSET_NAME UNIQUE (BASE_ASSET_NAME, QUOTE_ASSET_NAME)
)

CREATE TABLE BINANCE_SYMBOL_KLINE (
	ID bigint IDENTITY(1, 1) NOT NULL,
	SYMBOL_ID bigint NOT NULL,

	TRADE_COUNT integer NOT NULL,
	OPEN_VALUE decimal(18, 8) NOT NULL,
	HIGH_VALUE decimal(18, 8) NOT NULL,
	LOW_VALUE decimal(18, 8) NOT NULL,
	CLOSE_VALUE decimal(18, 8) NOT NULL,
	BASE_ASSET_VOLUME decimal(18, 8) NOT NULL,
	BASE_ASSET_TAKER_BUY_VOLUME decimal(18, 8) NOT NULL,
	QUOTE_ASSET_VOLUME decimal(18, 8) NOT NULL,
	QUOTE_ASSET_TAKER_BUY_VOLUME decimal(18, 8) NOT NULL,
	OPEN_TIMESTAMP bigint NOT NULL,
	CLOSE_TIMESTAMP bigint NOT NULL,
	CREATED_AT datetime NOT NULL CONSTRAINT DF__BINANCE_SYMBOL_KLINE__CREATED_AT DEFAULT GETDATE(),

	CONSTRAINT PK__BINANCE_SYMBOL_KLINE__ID PRIMARY KEY (ID),
	CONSTRAINT FK__BINANCE_SYMBOL_KLINE__SYMBOL_ID FOREIGN KEY (SYMBOL_ID) REFERENCES BINANCE_SYMBOL(ID),
	INDEX IX__BINANCE_SYMBOL_KLINE__SYMBOL_ID (SYMBOL_ID)
)

CREATE TABLE BINANCE_SYMBOL_TRADE (
	ID bigint IDENTITY(1, 1) NOT NULL,
	SYMBOL_ID bigint NOT NULL,

	NUMBER bigint NOT NULL,
	[VALUE] decimal(18, 8) NOT NULL,
	ASSET_QUANTITY decimal(18, 8) NOT NULL,
	ASSET_PRICE decimal(18, 8) NOT NULL,
	IS_BUYER_MAKER bit NOT NULL,
	IS_BEST_MATCH bit NOT NULL,
	EXECUTION_TIMESTAMP bigint NOT NULL,
	CREATED_AT datetime NOT NULL CONSTRAINT DF__BINANCE_SYMBOL_TRADE__CREATED_AT DEFAULT GETDATE(),

	CONSTRAINT PK__BINANCE_SYMBOL_TRADE__ID PRIMARY KEY (ID),
	CONSTRAINT FK__BINANCE_SYMBOL_TRADE__SYMBOL_ID FOREIGN KEY (SYMBOL_ID) REFERENCES BINANCE_SYMBOL(ID),
	INDEX IX__BINANCE_SYMBOL_TRADE__SYMBOL_ID (SYMBOL_ID)
)

CREATE TABLE BINANCE_SYMBOL_AGGTRADE (
	ID bigint IDENTITY(1, 1) NOT NULL,
	SYMBOL_ID bigint NOT NULL,

	NUMBER integer NOT NULL,
	FIRST_TRADE_NUMBER bigint NOT NULL,
	LAST_TRADE_NUMBER bigint NOT NULL,
	ASSET_QUANTITY decimal(18, 8) NOT NULL,
	ASSET_PRICE decimal(18, 8) NOT NULL,
	IS_BUYER_MAKER bit NOT NULL,
	IS_BEST_MATCH bit NOT NULL,
	EXECUTION_TIMESTAMP bigint NOT NULL,
	CREATED_AT datetime NOT NULL CONSTRAINT DF__BINANCE_SYMBOL_AGGTRADE__CREATED_AT DEFAULT GETDATE(),

	CONSTRAINT PK__BINANCE_SYMBOL_AGGTRADE__ID PRIMARY KEY (ID),
	CONSTRAINT FK__BINANCE_SYMBOL_AGGTRADE__SYMBOL_ID FOREIGN KEY (SYMBOL_ID) REFERENCES BINANCE_SYMBOL(ID),
	INDEX IX__BINANCE_SYMBOL_AGGTRADE__SYMBOL_ID (SYMBOL_ID)
)

CREATE FUNCTION dbo.FROM_UNIX_TIMESTAMP (@TIMESTAMP AS bigint)
RETURNS datetime2
AS
BEGIN
	RETURN DATEADD(MILLISECOND, @TIMESTAMP % 1000, DATEADD(SECOND, (@TIMESTAMP / 1000) % 60, DATEADD(MINUTE, ((@TIMESTAMP / 1000) / 60) % 60, DATEADD(HOUR, ((@TIMESTAMP / 1000) / 60) / 60, CAST('1970-01-01' AS datetime2)))))
END

/*
	As tabelas BINANCE_DATASET_* são carregadas de acordo com os parâmetros desejados para o treinamento do modelo.

	Cada dataset contém um ID de agrupamento (coluna DATASET_NUMBER) e um número de linha (coluna DATASET_ROW)
	para facilitar a ordenação. Note que as linhas são ordenadas em ordem decrescente (a mais recente será a primeira).

	A carga só é feita par a par, devido à volumetria; portanto não existe a coluna SYMBOL_ID.
*/

CREATE TABLE BINANCE_DATASET_KLINE (
	ID bigint IDENTITY(1, 1) NOT NULL,

	DATASET_NUMBER bigint NOT NULL,
	DATASET_ROW bigint NOT NULL,
	TRADE_COUNT integer NOT NULL,
	OPEN_VALUE decimal(18, 8) NOT NULL,
	HIGH_VALUE decimal(18, 8) NOT NULL,
	LOW_VALUE decimal(18, 8) NOT NULL,
	CLOSE_VALUE decimal(18, 8) NOT NULL,
	BASE_ASSET_VOLUME decimal(18, 8) NOT NULL,
	BASE_ASSET_TAKER_BUY_VOLUME decimal(18, 8) NOT NULL,
	QUOTE_ASSET_VOLUME decimal(18, 8) NOT NULL,
	QUOTE_ASSET_TAKER_BUY_VOLUME decimal(18, 8) NOT NULL,
	OPEN_TIMESTAMP bigint NOT NULL,
	CLOSE_TIMESTAMP bigint NOT NULL,
	CREATED_AT datetime NOT NULL CONSTRAINT DF__BINANCE_DATASET_KLINE__CREATED_AT DEFAULT GETDATE(),

	CONSTRAINT PK__BINANCE_DATASET_KLINE__ID PRIMARY KEY (ID),
	INDEX IX__BINANCE_DATASET_KLINE__DATASET_NUMBER (DATASET_NUMBER)
)

CREATE PROCEDURE BINANCE_DATASET_KLINE_LOAD
AS
BEGIN
	SET NOCOUNT ON

	DECLARE @SYMBOL_ID AS int = 2                            -- LTC/BTC
	DECLARE @DATASET_INTERVAL AS bigint = 1000 * 60 * 60 * 2 -- 2 horas
	DECLARE @FIRST_OPEN_TIMESTAMP AS bigint = 1577836800000  -- 01/01/2020 00:00:00.000
	DECLARE @LAST_CLOSE_TIMESTAMP AS bigint = 1580515199999  -- 31/01/2020 23:59:59.999

	SELECT
		[CURRENT].OPEN_TIMESTAMP AS [CURRENT_TIMESTAMP],
		HISTORIC.TRADE_COUNT,
		HISTORIC.OPEN_VALUE,
		HISTORIC.HIGH_VALUE,
		HISTORIC.LOW_VALUE,
		HISTORIC.CLOSE_VALUE,
		HISTORIC.BASE_ASSET_VOLUME,
		HISTORIC.BASE_ASSET_TAKER_BUY_VOLUME,
		HISTORIC.QUOTE_ASSET_VOLUME,
		HISTORIC.QUOTE_ASSET_TAKER_BUY_VOLUME,
		HISTORIC.OPEN_TIMESTAMP,
		HISTORIC.CLOSE_TIMESTAMP
	INTO #BINANCE_DATASET_KLINE
	FROM BINANCE_SYMBOL_KLINE AS [CURRENT]
	INNER JOIN BINANCE_SYMBOL_KLINE AS HISTORIC
		ON
			[CURRENT].SYMBOL_ID = HISTORIC.SYMBOL_ID
			AND HISTORIC.OPEN_TIMESTAMP BETWEEN [CURRENT].CLOSE_TIMESTAMP - @DATASET_INTERVAL AND [CURRENT].CLOSE_TIMESTAMP
	WHERE
		[CURRENT].SYMBOL_ID = @SYMBOL_ID
		AND HISTORIC.OPEN_TIMESTAMP >= @FIRST_OPEN_TIMESTAMP
		AND [CURRENT].CLOSE_TIMESTAMP <= @LAST_CLOSE_TIMESTAMP

	INSERT INTO BINANCE_DATASET_KLINE (
		DATASET_NUMBER,
		DATASET_ROW,
		TRADE_COUNT,
		OPEN_VALUE,
		HIGH_VALUE,
		LOW_VALUE,
		CLOSE_VALUE,
		BASE_ASSET_VOLUME,
		BASE_ASSET_TAKER_BUY_VOLUME,
		QUOTE_ASSET_VOLUME,
		QUOTE_ASSET_TAKER_BUY_VOLUME,
		OPEN_TIMESTAMP,
		CLOSE_TIMESTAMP
	)
	SELECT
		DENSE_RANK() OVER (ORDER BY [CURRENT_TIMESTAMP]) AS DATASET_NUMBER,
		ROW_NUMBER() OVER (PARTITION BY [CURRENT_TIMESTAMP] ORDER BY OPEN_TIMESTAMP DESC) AS DATASET_ROW,
		TRADE_COUNT,
		OPEN_VALUE,
		HIGH_VALUE,
		LOW_VALUE,
		CLOSE_VALUE,
		BASE_ASSET_VOLUME,
		BASE_ASSET_TAKER_BUY_VOLUME,
		QUOTE_ASSET_VOLUME,
		QUOTE_ASSET_TAKER_BUY_VOLUME,
		OPEN_TIMESTAMP,
		CLOSE_TIMESTAMP
	FROM #BINANCE_DATASET_KLINE
	WHERE [CURRENT_TIMESTAMP] IN (
		SELECT [CURRENT_TIMESTAMP]
		FROM #BINANCE_DATASET_KLINE
		GROUP BY [CURRENT_TIMESTAMP]
		HAVING COUNT(*) = 120
	)
	ORDER BY
		DATASET_NUMBER,
		DATASET_ROW

	DROP TABLE #BINANCE_DATASET_KLINE
END

/*
	As tabelas BINANCE_BOT_* devem ser acessadas somente através do ORM do robô.
*/

CREATE TABLE BINANCE_BOT_EVENT (
	ID bigint IDENTITY(1, 1) NOT NULL,

	[TYPE] varchar(50) NOT NULL,
	[TIMESTAMP] bigint NOT NULL,
	CREATED_AT datetime NOT NULL CONSTRAINT DF__BINANCE_BOT_EVENT__CREATED_AT DEFAULT GETDATE(),
	PAYLOAD nvarchar(4000),

	CONSTRAINT PK__BINANCE_BOT_EVENT__ID PRIMARY KEY (ID)
)

CREATE TABLE BINANCE_BOT_RESPONSE (
	ID bigint IDENTITY(1, 1) NOT NULL,

	CORRELATION_ID varchar(50),
	[STATUS] int NOT NULL,
	CREATED_AT datetime NOT NULL CONSTRAINT DF__BINANCE_BOT_RESPONSE__CREATED_AT DEFAULT GETDATE(),
	PAYLOAD nvarchar(4000),

	CONSTRAINT PK__BINANCE_BOT_RESPONSE__ID PRIMARY KEY (ID)
)
